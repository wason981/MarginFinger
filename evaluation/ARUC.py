import numpy as np
import matplotlib.pyplot as plt
import torch
from scipy.interpolate import interp1d
# smoothness = 100
# tiny
##trigger
# pro_acc = [0.98, 0.98, 0.98, 0.99, 0.97, 0.98, 0.98, 0.98, 0.97, 0.99, 0.98, 0.99, 0.98, 0.98, 0.99, 0.97, 0.99, 0.99, 0.99, 0.98]
# lab_acc = [0.99, 0.98, 0.97, 0.97, 0.99, 0.98, 0.98, 0.97, 0.98, 0.98, 0.99, 1.0, 0.98, 0.98, 0.98, 0.98, 0.96, 0.99, 0.97, 0.97]
# adv_acc = [0.99, 0.98, 0.99, 0.99, 0.99, 1.0, 1.0, 0.99, 0.98, 0.99, 1.0, 0.99, 1.0, 0.98, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99]
# fp_acc = [0.0, 0.0, 0.18, 0.86, 0.96]
# ft_acc = [0.0, 0.0, 0.0, 0.03, 0.04, 0.05, 0.05, 0.08, 0.1, 0.1, 0.14, 0.12, 0.13, 0.12, 0.12, 0.12, 0.12, 0.12, 0.13, 0.12]
# tl_acc = [0.88, 0.87, 0.89, 0.87, 0.87, 0.88, 0.9, 0.89, 0.89, 0.91]
# irr_acc = [0.98, 0.99, 0.99, 0.99, 0.98, 1.0, 0.99, 1.0, 0.99, 1.0, 0.99, 0.99, 0.98, 1.0, 0.99, 0.98, 0.98, 1.0, 0.99, 0.99]

#ipguard
# pro_acc=[0.81, 0.8, 0.81, 0.81, 0.81, 0.81, 0.82, 0.84, 0.82, 0.81, 0.8, 0.81, 0.83, 0.79, 0.82, 0.79, 0.84, 0.83, 0.85, 0.81]
# lab_acc =[0.79, 0.79, 0.77, 0.82, 0.82, 0.82, 0.83, 0.76, 0.83, 0.81, 0.8, 0.81, 0.84, 0.82, 0.8, 0.83, 0.8, 0.84, 0.8, 0.83]
# adv_acc =[0.79, 0.79, 0.79, 0.8, 0.81, 0.84, 0.81, 0.78, 0.84, 0.8, 0.8, 0.8, 0.83, 0.81, 0.85, 0.83, 0.87, 0.86, 0.85, 0.86]
# fp_acc =[0.79, 0.81, 0.77, 0.81, 0.95]
# ft_acc = [0.83, 0.81, 0.81, 0.8, 0.81, 0.79, 0.79, 0.79, 0.78, 0.78, 0.78, 0.77, 0.78, 0.78, 0.77, 0.78, 0.78, 0.78, 0.78, 0.78]
# tl_acc =[0.95, 0.95, 0.97, 0.97, 0.97, 0.97, 0.98, 0.97, 0.97, 0.97]
# irr_acc =[0.81, 0.81, 0.82, 0.83, 0.8, 0.81, 0.82, 0.82, 0.77, 0.81, 0.83, 0.82, 0.83, 0.84, 0.83, 0.8, 0.83, 0.81, 0.8, 0.84]

#cem
# pro_acc=[0.92, 0.79, 0.88, 0.79, 0.88, 0.75, 0.83, 0.79, 0.88, 0.83, 0.88, 0.88, 0.83, 0.75, 0.83, 0.83, 0.75, 0.88, 0.75, 0.75]
# lab_acc=[0.75, 0.71, 0.83, 0.83, 0.96, 0.83, 0.83, 0.79, 0.83, 0.79, 0.88, 0.79, 0.88, 0.79, 0.75, 0.88, 0.83, 0.92, 0.83, 0.96]
# adv_acc=[0.88, 0.88, 0.83, 0.88, 0.92, 0.83, 0.83, 0.83, 0.79, 0.75, 0.92, 0.75, 0.92, 0.83, 0.79, 0.88, 0.88, 0.83, 0.92, 0.88]
# fp_acc=    [0.42, 0.54, 0.71, 0.83, 0.96]
# ft_acc=    [0.67, 0.67, 0.62, 0.58, 0.58, 0.67, 0.58, 0.67, 0.62, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.58, 0.71, 0.67]
# tl_acc=    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
# irr_acc=  [1.0, 0.92, 0.92, 0.96, 0.96, 1.0, 0.92, 0.96, 0.96, 1.0, 1.0, 1.0, 0.92, 1.0, 0.96, 0.83, 1.0, 0.79, 0.79, 0.79]

# #sac-w
# pro_acc=torch.tensor([0.0806, 0.0771, 0.0795, 0.0798, 0.0779, 0.0857, 0.0823, 0.0806, 0.0836,0.0882, 0.0730, 0.0763, 0.0787, 0.0770, 0.0759, 0.0816, 0.0835, 0.0820,0.0821, 0.0845])
# lab_acc=torch.tensor([0.0760, 0.0766, 0.0776, 0.0791, 0.0747, 0.0796, 0.0849, 0.0820, 0.0798,0.0805, 0.0806, 0.0815, 0.0799, 0.0735, 0.0808, 0.0797, 0.0794, 0.0822,0.0851, 0.0837])
# adv_acc=torch.tensor([0.0838, 0.0863, 0.0854, 0.0856, 0.0856, 0.1043, 0.1065, 0.1056, 0.1038,0.1034, 0.1038, 0.0915, 0.0951, 0.0984, 0.0989, 0.1196, 0.1115, 0.1111,0.1211, 0.1235])
# fp_acc=torch.tensor([0.0299, 0.0424, 0.0540, 0.1109, 0.2366])
# ft_acc=torch.tensor([0.0429, 0.0460, 0.0466, 0.0489, 0.0508, 0.0528, 0.0539, 0.0543, 0.0554,0.0563, 0.0578, 0.0576, 0.0585, 0.0587, 0.0583, 0.0582, 0.0585, 0.0583,0.0588, 0.0582])
# tl_acc=torch.tensor([0.1312, 0.1343, 0.1331, 0.1365, 0.1376, 0.1399, 0.1399, 0.1378, 0.1382,0.1414])
# tl_irracc=torch.tensor([0.1511, 0.1485, 0.1500, 0.1479, 0.1488, 0.1374, 0.1400, 0.1346, 0.1393,0.1355])
# irr_acc=torch.tensor([0.0683, 0.0690, 0.0654, 0.0652, 0.0707, 0.0808, 0.0806, 0.0824, 0.0789,0.0803, 0.0790, 0.0794, 0.0786, 0.0809, 0.0779, 0.0748, 0.0783, 0.0720,0.0730, 0.0740])

#sac-m
# pro_acc=torch.tensor([0.0768, 0.0716, 0.0716, 0.0722, 0.0709, 0.0836, 0.0824, 0.0845, 0.0845,0.0830, 0.0765, 0.0769, 0.0759, 0.0759, 0.0767, 0.0827, 0.0829, 0.0826, 0.0826, 0.0838])
# lab_acc=torch.tensor([0.0716, 0.0702, 0.0719, 0.0722, 0.0728, 0.0835, 0.0854, 0.0847, 0.0829,0.0823, 0.0777, 0.0777, 0.0774, 0.0767, 0.0776, 0.0830, 0.0825, 0.0828,0.0835, 0.0834])
# adv_acc=torch.tensor([0.0798, 0.0786, 0.0796, 0.0797, 0.0799, 0.1108, 0.1052, 0.1051, 0.1039,0.1063, 0.1009, 0.0948, 0.0980, 0.1112, 0.1034, 0.1271, 0.1245, 0.1232,0.1307, 0.1410])
# fp_acc=torch.tensor([0.0183, 0.0286, 0.0488, 0.1067, 0.2217])
# ft_acc=torch.tensor([0.0311, 0.0347, 0.0359, 0.0379, 0.0394, 0.0413, 0.0420, 0.0431, 0.0442,0.0453, 0.0467, 0.0465, 0.0470, 0.0468, 0.0466, 0.0467, 0.0469, 0.0467,0.0472, 0.0468])
# tl_acc=torch.tensor([0.1400, 0.1383, 0.1381, 0.1382, 0.1373, 0.1365, 0.1366, 0.1370, 0.1365,0.1370])
# tl_irracc=torch.tensor([0.1511, 0.1485, 0.1500, 0.1479, 0.1488, 0.1374, 0.1400, 0.1346, 0.1393,0.1355])
# irr_acc=torch.tensor([0.0679, 0.0675, 0.0668, 0.0669, 0.0676, 0.0810, 0.0799, 0.0793, 0.0803,0.0804, 0.0778, 0.0787, 0.0779, 0.0781, 0.0788, 0.0786, 0.0779, 0.0768,0.0775, 0.0780])

# #MF
# pro_acc=[0.239, 0.289, 0.295, 0.304, 0.255, 0.277, 0.261, 0.288, 0.282, 0.256, 0.319, 0.321, 0.312, 0.345, 0.257, 0.307, 0.273, 0.32, 0.338, 0.308]
# lab_acc =[0.239, 0.229, 0.231, 0.221, 0.218, 0.182, 0.261, 0.257, 0.236, 0.231, 0.246, 0.257, 0.269, 0.29, 0.255, 0.261, 0.241, 0.296, 0.28, 0.226]
# adv_acc =[0.199, 0.222, 0.22, 0.205, 0.183, 0.179, 0.263, 0.239, 0.269, 0.277, 0.288, 0.26, 0.302, 0.158, 0.219, 0.156, 0.166, 0.216, 0.121, 0.172]
# fp_acc =[0.903, 0.803, 0.654, 0.265, 0.031]
# ft_acc =[0.687, 0.643, 0.61, 0.614, 0.602, 0.571, 0.594, 0.553, 0.538, 0.548, 0.539, 0.563, 0.541, 0.554, 0.547, 0.564, 0.554, 0.542, 0.567, 0.54]
# tl_acc =[0.002, 0.002, 0.002, 0.003, 0.003, 0.003, 0.003, 0.003, 0.002, 0.005]
# #[#0.0, 0.0, 0.001, 0.0, 0.001, 0.0, 0.0, 0.001, 0.002, 0.0]
# irr_acc =[0.14, 0.144, 0.122, 0.119, 0.165, 0.183, 0.179, 0.199, 0.185, 0.19, 0.184, 0.215, 0.192, 0.262, 0.219, 0.195, 0.198, 0.231, 0.239, 0.196]

#cifar10
#trigger
# pro_acc = [ 0.02,  0.04,  0.02,  0.01, -0.01,  0.02,  0.0,  0.02,  0.01,  0.04, -0.01,  0.03,  0.03, -0.01,  0.0,  0.05,  0.03,  0.0,  0.02,  0.02]
# lab_acc = [ 0.02,  0.0,  0.03,  0.0,  0.0,  0.01,  0.01,  0.02, -0.02,  0.02,  0.02, -0.02,  0.04,  0.0,  0.02,  0.01,  0.0,  0.02, -0.01,  0.02]
# adv_acc = [ 0.04,  0.02,  0.03,  0.02,  0.04,  0.0,  0.02,  0.02, -0.01,  0.01,  0.01,  0.01,  0.04,  0.03,  0.0,  0.01,  0.02,  0.02,  0.01,  0.01]
# fp_acc = [ 0.0, -0.02, -0.03, -0.03,  0.0, -0.03, -0.03, -0.03, -0.01,  0.01,  0.0,  0.0,  0.01,  0.02,  0.07]
# ft_acc = [0.02, 0.02, 0.01, 0.02, 0.02, 0.03, 0.02, 0.02, 0.01, 0.01, 0.02, 0.02, 0.0, 0.02, 0.01, 0.0, 0.02, 0.0, 0.02, 0.02]
# tl_acc = [0.04, 0.05, 0.06, 0.04, 0.05, 0.0, 0.0, 0.0, 0.0, 0.0]
# irr_acc = [ 0.03,  0.02,  0.03,  0.04,  0.02,  0.04,  0.04,  0.0,  0.02,  0.01,  0.03,  0.02,  0.03,  0.02,  0.01, -0.02,  0.02,  0.06,  0.04,  0.02]

#ipguard
# pro_acc = [ 0.02,  0.01,  0.02,  0.0, -0.01, -0.01,  0.0,  0.01,  0.04,  0.01, -0.01,  0.04,  0.02,  0.0,  0.04,  0.04,  0.01,  0.04,  0.03,  0.02]
# lab_acc = [ 0.03,  0.02,  0.0,  0.01,  0.03,  0.0,  0.01,  0.02, -0.03,  0.01,  0.03,  0.0,  0.0,  0.02,  0.02,  0.02,  0.04,  0.04,  0.06,  0.05]
# adv_acc = [ 0.01,  0.01,  0.01,  0.0, -0.03,  0.02,  0.03,  0.0, -0.02,  0.07,  0.09,  0.09,  0.0,  0.06,  0.09,  0.03,  0.07,  0.11,  0.04,  0.1]
# fp_acc = [0.0, 0.02, 0.0, 0.0, 0.01, 0.03, 0.03, 0.03, 0.02, 0.03, 0.02, 0.01, 0.05, 0.05, 0.05]
# ft_acc = [0.01, 0.01, 0.0, 0.0, 0.0, 0.01, 0.0, 0.01, 0.0, 0.0, 0.0, 0.01, 0.0, 0.01, 0.0, 0.01, 0.0, 0.0, 0.0, 0.01]
# tl_acc = [0.12, 0.12, 0.12, 0.12, 0.12, 0.05, 0.05, 0.05, 0.06, 0.04]
# irr_acc = [0.06, 0.04, 0.06, 0.03, 0.05, 0.02, 0.03, 0.02, 0.01, 0.07, 0.03, 0.07, 0.07, 0.05, 0.09, 0.1, 0.08, 0.08, 0.04, 0.07]

#cem
# pro_acc = [0.65, 0.63, 0.61, 0.66, 0.63, 0.8, 0.8, 0.79, 0.8, 0.83, 0.81, 0.8, 0.76, 0.79, 0.79, 0.76, 0.76, 0.76, 0.78, 0.76]
# lab_acc = [0.7, 0.7, 0.71, 0.7, 0.74, 0.86, 0.86, 0.82, 0.83, 0.82, 0.84, 0.84, 0.87, 0.92, 0.84, 0.82, 0.82, 0.82, 0.83, 0.83]
# adv_acc = [0.78, 0.77, 0.75, 0.76, 0.8, 0.82, 0.83, 0.81, 0.82, 0.81, 0.85, 0.9, 0.83, 0.87, 0.82, 0.83, 0.76, 0.8, 0.83, 0.77]
# fp_acc = [0.06, 0.08, 0.06, 0.11, 0.15, 0.14, 0.18, 0.17, 0.18, 0.2, 0.2, 0.28, 0.38, 0.64, 0.84]
# ft_acc = [0.09, 0.12, 0.11, 0.1, 0.08, 0.11, 0.1, 0.11, 0.1, 0.13, 0.05, 0.03, 0.04, 0.07, 0.03, 0.04, 0.06, 0.05, 0.06, 0.05]
# tl_acc = [0.57, 0.52, 0.52, 0.58, 0.54, 0.29, 0.29, 0.29, 0.29, 0.29]
# irr_acc = [0.83, 0.81, 0.87, 0.77, 0.84, 0.93, 0.94, 0.95, 0.92, 0.91, 0.97, 0.94, 0.92, 0.94, 0.93, 0.88, 0.89, 0.94, 0.87, 0.87]

#sac-w
# pro_acc=torch.tensor([0.0481, 0.0495, 0.0698, 0.0496, 0.0571, 0.0558, 0.0489, 0.0449, 0.0742,0.0487, 0.0653, 0.0506, 0.0628, 0.0544, 0.0486, 0.0715, 0.0687, 0.0629,0.0615, 0.0603])
# lab_acc=torch.tensor([0.0719, 0.0573, 0.0566, 0.0656, 0.0553, 0.0522, 0.0583, 0.0564, 0.0573,0.0548, 0.0512, 0.0496, 0.0509, 0.0515, 0.0520, 0.0552, 0.0600, 0.0706,0.0507, 0.0641])
# adv_acc=torch.tensor([0.0809, 0.0687, 0.0516, 0.0807, 0.0674, 0.0496, 0.0540, 0.0606, 0.0512,0.0542, 0.0544, 0.0533, 0.0528, 0.0590, 0.0562, 0.0508, 0.0549, 0.0575,0.0531, 0.0550])
# fp_acc=torch.tensor([0.0634, 0.0609, 0.0612, 0.0634, 0.0618, 0.1515, 0.1486, 0.1427, 0.1499,0.1508, 0.0666, 0.0625, 0.0665, 0.0914, 0.0608])
# ft_acc=torch.tensor([0.0666, 0.0625, 0.0665, 0.0914, 0.0608, 0.0556, 0.0606, 0.0576, 0.0571, 0.0556, 0.0033, 0.0322, 0.0568, 0.0700, 0.0706])
# tl_acc=torch.tensor([0.0683, 0.0683, 0.0649, 0.0494, 0.0530, 0.0488, 0.0491, 0.0478, 0.0530,0.0702, 0.1028, 0.1084, 0.0939, 0.0998, 0.0971, 0.1036, 0.0842, 0.1028,0.0866, 0.0920])
# irr_acc=torch.tensor([0.0090, 0.0053, 0.0044, 0.0126, 0.0050, 0.0075, 0.0119, 0.0081, 0.0099,0.0152, 0.1264, 0.0985, 0.2068, 0.0841, 0.0911, 0.0623, 0.0723, 0.0809,0.0693, 0.0856])

#sac-m
pro_acc=torch.tensor([0.0601, 0.0599, 0.0767, 0.0603, 0.0693, 0.0645, 0.0647, 0.0627, 0.0774,0.0638, 0.0815, 0.0686, 0.0671, 0.0629, 0.0629, 0.0698, 0.0728, 0.0713,0.0722, 0.0670])
lab_acc=torch.tensor([0.0935, 0.0712, 0.0846, 0.0898, 0.0768, 0.0677, 0.0691, 0.0684, 0.0688,0.0676, 0.0666, 0.0666, 0.0676, 0.0681, 0.0656, 0.0717, 0.0714, 0.0810,0.0709, 0.0817])
adv_acc=torch.tensor([0.1020, 0.0799, 0.0681, 0.0924, 0.0909, 0.0729, 0.0715, 0.0726, 0.0711,0.0730, 0.0761, 0.0791, 0.0760, 0.0841, 0.0817, 0.0761, 0.0744, 0.0780,0.0750, 0.0754])
fp_acc=torch.tensor([0.0882, 0.0870, 0.0872, 0.0885, 0.0877, 0.1340, 0.1349, 0.1413, 0.1393,0.1362, 0.0922, 0.0783, 0.0859, 0.1241, 0.0838])
ft_acc=torch.tensor([0.0786, 0.0779, 0.0772, 0.0757, 0.0767, 0.0046, 0.0300, 0.0449, 0.0571,0.0557, 0.0569, 0.0587, 0.0551, 0.0492, 0.0511, 0.0525, 0.0521, 0.0586,0.0644, 0.0955])
tl_acc=torch.tensor([0.1130, 0.1172, 0.1026, 0.1077, 0.1128, 0.1142, 0.0882, 0.1182, 0.0937,0.1027])
irr_acc=torch.tensor([0.1509, 0.1575, 0.1901, 0.1276, 0.1465, 0.0741, 0.0832, 0.0953, 0.0743,0.0918, 0.0849, 0.0724, 0.0742, 0.0725, 0.0745, 0.1000, 0.0844, 0.0938,0.1076, 0.0766])


#MF
# pro_acc=torch.tensor([0.56, 0.573, 0.581, 0.565, 0.59, 0.517, 0.513, 0.509, 0.527, 0.506, 0.526, 0.474, 0.519, 0.544, 0.551, 0.526, 0.524, 0.51, 0.513, 0.524])
# lab_acc=torch.tensor([0.504, 0.499, 0.512, 0.526, 0.527, 0.472, 0.472, 0.463, 0.477, 0.465, 0.483, 0.475, 0.485, 0.484, 0.464, 0.451, 0.482, 0.474, 0.445, 0.466])
# adv_acc=torch.tensor([0.47, 0.471, 0.479, 0.529, 0.512, 0.475, 0.441, 0.495, 0.489, 0.49, 0.487, 0.451, 0.472, 0.463, 0.468, 0.46, 0.482, 0.436, 0.442, 0.472])
# fp_acc=torch.tensor([0.972, 0.911, 0.85, 0.802, 0.778, 0.766, 0.746, 0.745, 0.702, 0.718, 0.72, 0.625, 0.453, 0.356, 0.173])
# ft_acc=torch.tensor([0.843, 0.837, 0.83, 0.825, 0.83, 0.822, 0.813, 0.839, 0.831, 0.822, 0.95, 0.979, 0.976, 0.952, 0.977, 0.964, 0.958, 0.964, 0.934, 0.928])
# tl_acc=torch.tensor([0.391, 0.409, 0.407, 0.395, 0.398, 0.492, 0.499, 0.508, 0.516, 0.487])
# ####torch.tensor([0.112, 0.326, 0.278, 0.299, 0.266, 0.288, 0.275, 0.269, 0.258, 0.256]
# irr_acc=torch.tensor([0.422, 0.398, 0.429, 0.44, 0.434, 0.421, 0.403, 0.428, 0.415, 0.429, 0.416, 0.415, 0.433, 0.411, 0.422, 0.383, 0.395, 0.394, 0.378, 0.409])
robustness_scores = []
uniqueness_scores = []
for threshold in range(0,101):
    threshold=threshold/100
    robustness_scores.append((sum(torch.tensor(pro_acc)>threshold)+
                              sum(torch.tensor(lab_acc)>threshold)+
                              sum(torch.tensor(adv_acc)>threshold)+
                              sum(torch.tensor(fp_acc)>threshold)+
                              sum(torch.tensor(ft_acc)>threshold)+
                              sum(torch.tensor(tl_acc)>threshold)
                              )/105)
    uniqueness_scores.append(sum(torch.tensor(irr_acc)<threshold)/len(irr_acc))
thresholds = [i / 100 for i in range(101)]
fig = plt.figure()
ax = fig.subplots()
plt.plot(thresholds, robustness_scores, label='Robustness',
         color='#0099CC')  # 第一个data表示选取data为数据集，第二个是函数，data的平方
plt.plot(thresholds, uniqueness_scores, label='Uniqueness', color='#FF6666')  # 同上
max_values = [min(x, y) for x, y in zip(robustness_scores, uniqueness_scores)]
aruc = np.trapz(max_values, thresholds)

plt.fill_between(thresholds, max_values, facecolor='#CCCCCC', lw=.1, zorder=2)
plt.title('(e)CIFAR-10 SAC-m(ARUC=%.3f)' % aruc)
# plt.title('(f)Tiny-ImageNet SAC-w(ARUC=%.3f)' % aruc)
ax.set_xlabel('Thresholds(T)')

x_major_locator = plt.MultipleLocator(0.1)
y_major_locator = plt.MultipleLocator(0.1)

ax.xaxis.set_major_locator(x_major_locator)
ax.yaxis.set_major_locator(y_major_locator)

plt.legend(loc='upper right')
plt.savefig('ARUC_CIFAR_10_SAC_m.png')
plt.show()

# thresholds = list(range(0,11))
# robustness_scores = np.array([1,0.93, 0.82, 0.74, 0.65, 0.54, 0.43, 0.36, 0.27, 0.13, 0])
# uniqueness_scores = np.array([ 0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.76, 0.82, 0.9, 1 ])
# #
# #
# fig=plt.figure()
# ax=fig.subplots()
# plt.plot(thresholds,robustness_scores,label='Robustness',color='#0099CC') #第一个data表示选取data为数据集，第二个是函数，data的平方
# plt.plot(thresholds,uniqueness_scores,label='Uniqueness',color='#FF6666') #同上
# aruc = np.trapz(robustness_scores, uniqueness_scores)
# # max_values = [min(x, y) for x, y in zip(robustness_scores, uniqueness_scores)]
# max_values=np.minimum(robustness_scores,uniqueness_scores)
#
# plt.fill_between(thresholds, max_values,facecolor='#CCCCCC',lw=.1,zorder=2)
# plt.title('(a)IPGuard(ARUC=%.3f)' % aruc)
# ax.set_xlabel('Thresholds(T)')
# #
# #
# x_major_locator = plt.MultipleLocator(1)
# y_major_locator = plt.MultipleLocator(0.1)
#
# ax.xaxis.set_major_locator(x_major_locator)
# ax.yaxis.set_major_locator(y_major_locator)
# #
# plt.legend(loc='upper right')
# plt.savefig('ARUC_IPGuard.png')
# plt.show()
# # import numpy as np
# # import matplotlib.pyplot as plt
# #
# # x=np.arange(0,5,0.02)
# #
# # y1=2-2*x
# # y2=6-x
# # y3=8-4*x
# #
# # y4=np.minimum(y2,y3)
# #
# # plt.plot(x,y1,color="red",label="2-2x")
# # plt.plot(x,y2,color="blue",label="6-x")
# # plt.plot(x,y3,color="green",label="8-4x")
# # plt.ylim(0, 10)
# # plt.fill_between(x, y1, y4, color='yellow')
# # plt.legend()
# # plt.show()
